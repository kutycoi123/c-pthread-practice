5. QUESTIONS
============

Q 1  What are some pros and cons of using the struct of function pointers
     approach as we did in the MP to link different modules?  Does it
     significantly affect performance?  Give some examples of when you would
     and wouldn't use this approach, and why.

     - The pros is that it brings flexibility for us to define functions for a struct.
     As in this assignment, we have 2 distinct behaviors in choosing next worker for fifo and
     rr policy. It's like we can have polymorphism in our codes.So we just need to assign the next_worker function pointer to 2 separate functions when we initialize struct variables

     - The cons is that, it might cause a difficulty in understanding the general behavior of that struct since the function pointer can be assigned to any function so it might have unexpected behavior among different struct variables. One more important cons is that using function pointer may slow down the performance of a program because it prevent compiler optimizations and processor optimizations.

     - I would not use function pointer when my struct has a common function behavior among all variables. I will just create a common function in struct to be used by all variables
     - I would use function pointer when I really need my struct to be as flexible as I can. Maybe because the program requires many different behaviors among struct variables. 

Q 2  Briefly describe the synchronization constructs you needed to implement
     this MP--i.e., how you mediated admission of threads to the scheduler
     queue and how you made sure only the scheduled thread would run at any
     given time.

     - I create a lock called thread_lock for each thread to indicate when a thread can be executed. When the scheduler is runing, the thread has to wait until scheduler unlocks the thread_lock
     - I create cpu_lock which is used by either scheduler or threads. When a thread is running, the scheduler has to wait until thread releases the cpu_lock. 

Q 3  Why is the dummy scheduling implementation provided potentially
     unsafe (i.e. could result in invalid memory references)?  How does
     your implementation avoid this problem?

     - The dummy scheduling implementation basically does nothing and it actually assigns the same function to different function pointers in sched_impl_t struct. This can potentially cause memory leaks or invalid memory references due to unexpected behavior of functions
     - To avoid this problem, I created separate functions with synchronization to make sure that shared memories will be handled properly among different threads. 

Q 4  When using the FIFO or Round Robin scheduling algorithm, can
     sched_proc() ever "miss" any threads and exit early before all threads
     have been scheduled and run to completion?  If yes, give an example; if
     no, explain why not.

     - Given a correct implementation for FIFO and Round Robin, it's impossible for
     sched_proc() to miss any threads because its while condition (while (num_workers_remaining > 0)) ensures that 
     it can only exit when all threads have completed their executions. 

Q 5  Why are the three variables in scheduler.h declared 'extern'?  What
     would happen if they were not declared 'extern'?  What would happen
     if they were not declared without the 'extern' in any file?

     - They are declared extern meaning those variables are declared but not yet defined in scheduler.h
     They might be defined somewhere in other files. Using 'extern'is a good way to declare a globar variables which will be referenced in different files.
     - If they were not declared 'extern', they must be defined which means they must be allocated.
     - If they werer not declared 

Q 6  Describe the behavior of exit_error() function in scheduler.c.  Why
     does exit_error() not use errno?

Q 7  Does it matter whether the call to sched_ops->wait_for_queue(queue) in
     sched_proc() actually does anything?  How would it affect correctness
     if it just returned right away?  How about performance?

Q 8  Explain how worker_proc() is able to call the appropriate
     implementation of wait_for_cpu() corresponding to the scheduling policy
     selected by the user on the command line.  Start from main() and
     briefly explain each step along the way.

Q 9  Is it possible that a worker thread would never proceed past the call to
     wa->ops->wait_for_cpu(&wa->info) when using one of the scheduling
     policies implemented in this MP?

Q 10 Explain how you would alter the program to demonstrate the "convoy"
     effect, when a large compute bound job that never yields to another
     thread slows down all other jobs in a FIFO scheduled system? See Page
     402, Stallings, the paragraph starting "Another difficulty with FCFS is
     that it tends to favor processor-bound processes over I/O bound
     processes".  Why is it difficult to show the benefits of Round Robin
     scheduling in this case using the current implementation in the machine
     problem?
