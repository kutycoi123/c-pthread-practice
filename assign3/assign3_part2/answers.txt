Question 1.
Why do we block SIGUSR2 and SIGALRM in worker.c?  Why do we unblock SIGUSR1 and
SIGTERM in worker.c?
- We block SIGUSR2 and SIGALRM in worker.c since these two signals are only used later in program 
to resume execution and restart timer for the worker thread. 
We don't want our worker thread is interrupted by these two signals while the worker is still trying to get into the queue
- We unblock SIGUSR1 and SIGTERM in worker.c since these two signals can be used to suspend and cancel a thread.
So it makes sense for us to use these signals to suspend or cancel threads right away even before the thread entering queue.

Question 2.
We use sigwait() and sigaction() in our code. Explain the difference between the
two. (Please explain from the aspect of thread behavior rather than syntax).
- sigwait() suspends the current thread until it receives a specific signal
- sigaction() defines a specific actioner or handler for a specific signal, meaning that 
we can create our own handler function and use sigaction() to assign this handler function
for handling a specific signal. 

Question 3.
When we use POSIX:TMR interval timer, we are using relative time. What is the
alternative? Explain the difference between the two.
- The alternative is absolute time.
- Difference is that: 
	+ Relative time is initialized with a expiration time based on the time elapsed
	e.g program stops after 10 seconds from its start. 
	+ Absolute time will expire at a specific date and time
	e.g program starts at 4:00 AM.


Question 4.
Look at start_worker() in worker.c, a worker thread is executing within an
infinite loop at the end. When does a worker thread terminate?
- A worker thread terminates when it's canceled by scheduler calling cancel_worker() to send SIGTERM signal,
then cancel_thread() will be called to handle SIGTERM signal and eventually call pthread_exit() to exit thread.

Question 5.
When does the scheduler finish?  Why does it not exit when the scheduler queue
is empty?
- The scheduler finishes when all worker threads has been finished or canceled. It does not exit
when the scheduler queue is empty since it has to wait for worker threads to enter the queue. 


Question 6.
After a thread is scheduled to run, is it still in the sched_queue? When is it
removed from the head of the queue? When is it removed from the queue completely?
- It is still in the sched_queue. It is removed from the head of the queue when it's suspended
It will be removed from the queue completely when it has finished its execution or canceled. 

Question 7.
We've removed all other condition variables in SMP4, and replaced them with a
timer and signals. Why do we still use the semaphore queue_sem?
- We still need the semaphore queue_sem since it helps to lock the queue when queue
is full (no available slots for other workers) and the worker threads needs to compete each other
to enter the queue

Question 8.
What's the purpose of the global variable "completed" in scheduler.c? Why do we
compare "completed" with thread_count before we wait_for_queue() in
next_worker()?
- "completed" is used to count number of canceled or "completed" worker threads so far.
Therefore, we need to compare "completed" with thread_count to make sure that whether we have "completed"
all the threads or not. If yes, then we just return right away in next_worker(), no need to call
wait_for_queue()

Question 9.
We only implemented Round Robin in this SMP. If we want to implement a FIFO
scheduling algorithm and keep the modification as minimum, which function in
scheduler.c is the one that you should modify? Briefly describe how you would
modify this function.
- We will only need to modify suspend_worker() function since this is the function used to
move the current worker thread to the end of the queue
- A small modification would be, instead of moving the current thread to the tail of the queue,
we will just keep the current worker thread at the head of the queue when it's suspended 
so that it can continue to run until it's completely finished or canceled. 

Question 10.
In this implementation, the scheduler only changes threads when the time quantum
expires.  Briefly explain how you would use an additional signal to allow the
scheduler to change threads in the middle of a time quantum.  In what situations
would this be useful?
- I would create one more timer variable which starts at the same time when the original timer starts but
expires after half quantum time. Once this timer expires, it sends an additional signal
for scheduler to change threads. The logic can actually be handled within the same timer_handler() function
by modifying it a bit so that it know which timer it's dealing with, for example:
	if (current_timer == original_timer)
		do_something
	else if (current_timer == new_timer)
		do_something_else
the current_timer can be achieved by creating a signinfo_t variable parameter for timer_handler() and use this
siginfo_t var to get the timer pointer pointing to either original_timer or new_timer. 
Reference: https://www.graphics-muse.org/wp/?p=868